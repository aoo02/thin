@use "backend" as *;
#{c(menus menu)} {
    background-color: $card;
    max-height: 60vh;
    &::before {
        content: "";
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
        position: absolute;
        pointer-events: none;
        background-color: transparent;
        border-radius: 4px;
        backdrop-filter: blur(5px);
    }
}

@debug "redo menu dropdown to use a variable for checks?";
#{c(menus item)} {
    // checkbox + radio
    :is(#{c(menus checkbox)},#{c(menus radioSelection)}) {
        color: $primary;
    }
    // colors
    &#{c(menus colorBrand)} {
        color: $primary;
    }
    // hover/active
    &:is(#{c(menus itemFocused)},#{c(menus itemFocused)}:active,:active:not(#{c(menus itemHideInteraction)})) {
        background-color: $primary;
        // colors
        &#{c(menus colorDanger)} {
            background-color: $red;
        }
        &#{c(menus colorBrand)} {
            background-color: $primary;
            color: #fff; // overwrite what's overwritten. uses discord's default
        }
        // checkbox + radio
        #{c(menus checkboxCheck)} {
            color: $primary;
        }
    }
    // make block and remove friend red
    &:is(#{c(menus colorDanger)},#user-context-block,#user-context-remove-friend) {
        color: $red;
        &:is(#{c(menus itemFocused)},:active:not(#{c(menus itemHideInteraction)}),:hover) {
            color: #fff;
            background-color: $red;
        }
    }

}

#{c(menus quickReactionButton)} {
    background-color: transparent;
    &:hover {
        background-color: var(--background-modifier-hover);
    }
    &:active {
        background-color: var(--background-modifier-active);
    }
}

// Both of below can be accessed by clicking the phone/camera button and going
// into the profile directly. I don't know anyone who uses these.
#user-context-call,
#user-context-note {
  display: none;
}

#{c(menus dropdownFilled)}#{c(menus dropdownSelect)} {
    @include card;
    &#{c(menus dropdownOpen)} {
        border-bottom-width: 0;
        &#{c(menus dropdownSelectTop)} {
            border-bottom-width: 1px;
        }
    }
}
#{c(menus dropdownPopout)} {
    background-color: $card;
    backdrop-filter: blur(5px);
    border: 1px solid $primary;
}
#{c(menus dropdownPopoutOption)} {
    &:is(:hover,:focus,#{c(menus dropdownPopoutOptionFocused)}) {
        background-color: var(--background-modifier-hover);
    }
    &[aria-selected="true"] {
        background-color: var(--background-modifier-active);
    }
}
#{c(menus dropdownPopoutSelectedIcon)} {
    color: $primary;
}

#{c(menus status)} {
    &[style*="hsl(139, calc(var(--saturation-factor, 1) * 47.3%), 43.9%)"] {
        background-color: $green !important; // !important reason: inline style
    }
    &[style*="hsl(38, calc(var(--saturation-factor, 1) * 95.7%), 54.1%)"] {
        background-color: $yellow !important; // !important reason: inline style
    }
    &[style*="hsl(359, calc(var(--saturation-factor, 1) * 82.6%), 59.4%)"] {
        background-color: $red !important; // !important reason: inline style
    }
    &[style*="hsl(214, calc(var(--saturation-factor, 1) * 9.9%), 50.4%)"] {
        background-color: $offline !important; // !important reason: inline style
    }
}